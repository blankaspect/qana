/*====================================================================*\

PreferencesDialog.java

Preferences dialog box class.

\*====================================================================*/


// PACKAGE


package uk.blankaspect.qana;

//----------------------------------------------------------------------


// IMPORTS


import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.Window;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import java.io.File;

import java.util.EnumMap;
import java.util.Map;

import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;

import javax.swing.table.TableColumn;

import uk.blankaspect.common.crypto.EntropyAccumulator;
import uk.blankaspect.common.crypto.StreamEncrypter;

import uk.blankaspect.common.exception.AppException;
import uk.blankaspect.common.exception.FileException;

import uk.blankaspect.common.gui.BitSelectionPanel;
import uk.blankaspect.common.gui.BooleanComboBox;
import uk.blankaspect.common.gui.ColourSampleIcon;
import uk.blankaspect.common.gui.DimensionsSpinnerPanel;
import uk.blankaspect.common.gui.FButton;
import uk.blankaspect.common.gui.FCheckBox;
import uk.blankaspect.common.gui.FComboBox;
import uk.blankaspect.common.gui.FIntegerSpinner;
import uk.blankaspect.common.gui.FixedWidthCheckBox;
import uk.blankaspect.common.gui.FixedWidthLabel;
import uk.blankaspect.common.gui.FixedWidthPanel;
import uk.blankaspect.common.gui.FLabel;
import uk.blankaspect.common.gui.FontEx;
import uk.blankaspect.common.gui.FontStyle;
import uk.blankaspect.common.gui.FTabbedPane;
import uk.blankaspect.common.gui.FTextField;
import uk.blankaspect.common.gui.GuiUtils;
import uk.blankaspect.common.gui.IntegerSpinner;
import uk.blankaspect.common.gui.PathnamePanel;
import uk.blankaspect.common.gui.TextRendering;
import uk.blankaspect.common.gui.TitledBorder;

import uk.blankaspect.common.misc.FilenameSuffixFilter;
import uk.blankaspect.common.misc.KeyAction;
import uk.blankaspect.common.misc.MaxValueMap;

import uk.blankaspect.common.regex.RegexUtils;

import uk.blankaspect.common.textfield.ConstrainedTextField;
import uk.blankaspect.common.textfield.IntegerField;
import uk.blankaspect.common.textfield.IntegerValueField;

//----------------------------------------------------------------------


// PREFERENCES DIALOG BOX CLASS


class PreferencesDialog
	extends JDialog
	implements ActionListener
{

////////////////////////////////////////////////////////////////////////
//  Constants
////////////////////////////////////////////////////////////////////////

	private static final	String	KEY	= PreferencesDialog.class.getCanonicalName();

	// Main panel
	private static final	String	TITLE_STR				= "Preferences";
	private static final	String	SAVE_CONFIGURATION_STR	= "Save configuration";
	private static final	String	SAVE_CONFIG_FILE_STR	= "Save configuration file";
	private static final	String	WRITE_CONFIG_FILE_STR	= "Write configuration file";

	// General panel
	private static final	int		MAX_EDIT_LIST_LENGTH_FIELD_LENGTH	= 4;

	private static final	String	SHOW_UNIX_PATHNAMES_STR			= "Display UNIX-style pathnames";
	private static final	String	SELECT_TEXT_ON_FOCUS_GAINED_STR	= "Select text when focus is gained";
	private static final	String	SAVE_MAIN_WINDOW_LOCATION_STR	= "Save location of main window";
	private static final	String	SAVE_MAIN_WINDOW_SIZE_STR		= "Save size of main window";
	private static final	String	MAX_EDIT_HISTORY_SIZE_STR		= "Maximum size of edit history";
	private static final	String	CLEAR_CLIPBOARD_ON_EXIT_STR		= "Clear clipboard on exit";
	private static final	String	ENCRYPTED_FILE_DAD_ACTION_STR	= "Encrypted file drag-and-drop action";
	private static final	String	CARRIER_IMAGE_KIND_STR			= "Autogenerated carrier image kind";

	// Appearance panel
	private static final	String	LOOK_AND_FEEL_STR		= "Look-and-feel";
	private static final	String	NO_LOOK_AND_FEELS_STR	= "<no look-and-feels>";
	private static final	String	TEXT_ANTIALIASING_STR	= "Text antialiasing";
	private static final	String	STATUS_TEXT_COLOUR_STR	= "Status text colour";

	// Archive view panel
	private static final	int		ARCHIVE_VIEW_ROWS_FIELD_LENGTH			= 3;
	private static final	int		ARCHIVE_VIEW_COLUMN_WIDTH_FIELD_LENGTH	= 4;

	private static final	String	NUM_ROWS_STR				= "Rows";
	private static final	String	COLUMN_WIDTHS_STR			= "Column widths";
	private static final	String	SET_FROM_CURRENT_VIEW_STR	= "Set from current view";
	private static final	String	SET_WIDTHS_TOOLTIP_STR		= "Set the column widths to those of the current " +
																	"archive view";

	// Text view panel
	private static final	int		TEXT_VIEW_COLUMNS_FIELD_LENGTH	= 3;
	private static final	int		TEXT_VIEW_ROWS_FIELD_LENGTH		= 3;

	private static final	String	SIZE_STR						= "Size";
	private static final	String	COLUMNS_STR						= "columns";
	private static final	String	ROWS_STR						= "rows";
	private static final	String	COLOURS_STR						= "Colours";
	private static final	String	TEXT1_STR						= "Text";
	private static final	String	BACKGROUND_STR					= "Background";
	private static final	String	SELECTION_TEXT_STR				= "Selection text";
	private static final	String	SELECTION_BACKGROUND_STR		= "Selection background";
	private static final	String	TEXT_COLOUR_STR					= "Text colour";
	private static final	String	BACKGROUND_COLOUR_STR			= "Background colour";
	private static final	String	SELECTION_TEXT_COLOUR_STR		= "Selection text colour";
	private static final	String	SELECTION_BACKGROUND_COLOUR_STR	= "Selection background colour";

	// Text panel
	private static final	int		END_OF_SENTENCE_PATTERN_FIELD_NUM_COLUMNS	= 40;
	private static final	int		NUM_SPACES_BETWEEN_SENTENCES_FIELD_LENGTH	= 1;

	private static final	String	TEXT_WRAP_STR						= "Text wrap";
	private static final	String	DEFAULT_LINE_LENGTH_STR				= "Default line length";
	private static final	String	END_OF_SENTENCE_PATTERN_STR			= "End-of-sentence pattern";
	private static final	String	NUM_SPACES_BETWEEN_SENTENCES_STR	= "Number of spaces between sentences";

	// Files panel
	private static final	int		FILE_ERASURE_NUM_PASSES_FIELD_LENGTH	= 2;

	private static final	String	FILENAME_SUFFIX_STR					= "Filename suffix";
	private static final	String	SELECT_OUTPUT_FILE_STR				= "Select encrypt/decrypt output file";
	private static final	String	FILE_ERASURE_NUM_PASSES_STR			= "Number of passes when erasing a file";
	private static final	String	SAVE_FILE_SELECTION_PATHNAMES_STR	= "Save pathnames from file-selection " +
																			"dialogs";

	// Keys panel
	private static final	String	KEY_DATABASE_STR			= "Key database";
	private static final	String	WARN_TEMPORARY_KEY_STR		= "Warn of use of temporary key";
	private static final	String	KEY_DERIVATION_FUNCTION_STR	= "Key derivation function";
	private static final	String	KEY_DATABASE_TITLE_STR		= "Key database";
	private static final	String	SELECT_STR					= "Select";
	private static final	String	SELECT_FILE_STR				= "Select file";

	// Entropy panel
	private static final	int		ENTROPY_TIMER_DIVISOR_FIELD_LENGTH	= 7;
	private static final	int		ENTROPY_INTERVAL_FIELD_LENGTH		= 4;

	private static final	String	SEED_FILE_DIRECTORY_STR			= "Directory of seed file";
	private static final	String	WARN_NOT_SEEDED_STR				= "Warn if not seeded";
	private static final	String	TIMER_DIVISOR_STR				= "High-resolution timer divisor";
	private static final	String	BIT_MASK_STR					= "Bit mask";
	private static final	String	INTERVAL_STR					= "Interval";
	private static final	String	MS_STR							= "ms";
	private static final	String	SEED_FILE_DIRECTORY_TITLE_STR	= "Directory of seed file";
	private static final	String	SELECT_DIRECTORY_STR			= "Select directory";

	// Fonts panel
	private static final	String	PT_STR	= "pt";

	// Commands
	private interface Command
	{
		String	TOGGLE_ARCHIVE_VIEW_COLUMN						= "toggleArchiveViewColumn";
		String	SET_ARCHIVE_VIEW_COLUMN_WIDTHS_TO_CURRENT		= "setArchiveViewColumnWidthsToCurrent";
		String	CHOOSE_STATUS_TEXT_COLOUR						= "chooseStatusTextColour";
		String	CHOOSE_TEXT_VIEW_TEXT_COLOUR					= "chooseTextViewTextColour";
		String	CHOOSE_TEXT_VIEW_BACKGROUND_COLOUR				= "chooseTextViewBackgroundColour";
		String	CHOOSE_TEXT_VIEW_SELECTION_TEXT_COLOUR			= "chooseTextViewSelectionTextColour";
		String	CHOOSE_TEXT_VIEW_SELECTION_BACKGROUND_COLOUR	= "chooseTextViewSelectionBackgroundColour";
		String	CHOOSE_KEY_DATABASE								= "chooseKeyDatabase";
		String	CHOOSE_SEED_FILE_DIRECTORY						= "chooseSeedFileDirectory";
		String	SAVE_CONFIGURATION								= "saveConfiguration";
		String	ACCEPT											= "accept";
		String	CLOSE											= "close";
	}

////////////////////////////////////////////////////////////////////////
//  Enumerated types
////////////////////////////////////////////////////////////////////////


	// TABS


	private enum Tab
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		GENERAL
		(
			"General"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelGeneral();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesGeneral();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesGeneral();
			}

			//----------------------------------------------------------
		},

		APPEARANCE
		(
			"Appearance"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelAppearance();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesAppearance();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesAppearance();
			}

			//----------------------------------------------------------
		},

		ARCHIVE_VIEW
		(
			"Archive view"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelArchiveView();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesArchiveView();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesArchiveView();
			}

			//----------------------------------------------------------
		},

		TEXT_VIEW
		(
			"Text view"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelTextView();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesTextView();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesTextView();
			}

			//----------------------------------------------------------
		},

		TEXT
		(
			"Text"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelText();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesText();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesText();
			}

			//----------------------------------------------------------
		},

		FILES
		(
			"Files"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelFiles();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesFiles();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesFiles();
			}

			//----------------------------------------------------------
		},

		KEYS
		(
			"Keys"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelKeys();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesKeys();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesKeys();
			}

			//----------------------------------------------------------
		},

		ENTROPY
		(
			"Entropy"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelEntropy();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesEntropy();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesEntropy();
			}

			//----------------------------------------------------------
		},

		FONTS
		(
			"Fonts"
		)
		{
			@Override
			protected JPanel createPanel(PreferencesDialog dialog)
			{
				return dialog.createPanelFonts();
			}

			//----------------------------------------------------------

			@Override
			protected void validatePreferences(PreferencesDialog dialog)
				throws AppException
			{
				dialog.validatePreferencesFonts();
			}

			//----------------------------------------------------------

			@Override
			protected void setPreferences(PreferencesDialog dialog)
			{
				dialog.setPreferencesFonts();
			}

			//----------------------------------------------------------
		};

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private Tab(String text)
		{
			this.text = text;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Abstract methods
	////////////////////////////////////////////////////////////////////

		protected abstract JPanel createPanel(PreferencesDialog dialog);

		//--------------------------------------------------------------

		protected abstract void validatePreferences(PreferencesDialog dialog)
			throws AppException;

		//--------------------------------------------------------------

		protected abstract void setPreferences(PreferencesDialog dialog);

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	String	text;

	}

	//==================================================================


	// ERROR IDENTIFIERS


	private enum ErrorId
		implements AppException.IId
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		NO_FILENAME_SUFFIX
		("No %1 filename suffix was specified."),

		NOT_A_FILE
		("The pathname does not denote a file."),

		NOT_A_DIRECTORY
		("The pathname does not denote a directory."),

		MALFORMED_END_OF_SENTENCE_PATTERN
		("The end-of-sentence pattern is not a well-formed regular expression.\n(%1)"),

		INVALID_DEFAULT_LINE_LENGTH
		("The default line length is invalid."),

		DEFAULT_LINE_LENGTH_OUT_OF_BOUNDS
		("The default line length must be between " + TextDocument.MIN_WRAP_LINE_LENGTH + " and " +
			TextDocument.MAX_WRAP_LINE_LENGTH + ".");

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ErrorId(String message)
		{
			this.message = message;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : AppException.IId interface
	////////////////////////////////////////////////////////////////////

		public String getMessage()
		{
			return message;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	String	message;

	}

	//==================================================================

////////////////////////////////////////////////////////////////////////
//  Member classes : non-inner classes
////////////////////////////////////////////////////////////////////////


	// ARCHIVE VIEW PANEL CLASS


	private static class ArchiveViewPanel
		extends FixedWidthPanel
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	String	KEY	= ArchiveViewPanel.class.getCanonicalName();

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ArchiveViewPanel(LayoutManager layout)
		{
			super(layout);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Class methods
	////////////////////////////////////////////////////////////////////

		private static void reset()
		{
			MaxValueMap.removeAll(KEY);
		}

		//--------------------------------------------------------------

		private static void update()
		{
			MaxValueMap.update(KEY);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		protected String getKey()
		{
			return KEY;
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// ARCHIVE VIEW PANEL FIXED-WIDTH COMPONENT FACTORY CLASS


	private static class ArchiveViewPanelComponentFactory
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	String	KEY	= ArchiveViewPanelComponentFactory.class.getCanonicalName();

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ArchiveViewPanelComponentFactory()
		{
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Class methods
	////////////////////////////////////////////////////////////////////

		private static FixedWidthLabel createLabel(String text)
		{
			return new FixedWidthLabel(text)
			{
				@Override
				protected String getKey()
				{
					return KEY;
				}
			};
		}

		//--------------------------------------------------------------

		private static FixedWidthCheckBox createCheckBox(String text)
		{
			return new FixedWidthCheckBox(text)
			{
				@Override
				protected String getKey()
				{
					return KEY;
				}
			};
		}

		//--------------------------------------------------------------

		private static void reset()
		{
			MaxValueMap.removeAll(KEY);
		}

		//--------------------------------------------------------------

		private static void update()
		{
			MaxValueMap.update(KEY);
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// FILES PANEL CLASS


	private static class FilesPanel
		extends FixedWidthPanel
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	String	KEY	= FilesPanel.class.getCanonicalName();

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private FilesPanel(LayoutManager layout)
		{
			super(layout);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Class methods
	////////////////////////////////////////////////////////////////////

		private static void reset()
		{
			MaxValueMap.removeAll(KEY);
		}

		//--------------------------------------------------------------

		private static void update()
		{
			MaxValueMap.update(KEY);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		protected String getKey()
		{
			return KEY;
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// FILES PANEL LABEL CLASS


	private static class FilesPanelLabel
		extends FixedWidthLabel
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	String	KEY	= FilesPanelLabel.class.getCanonicalName();

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private FilesPanelLabel(String text)
		{
			super(text);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Class methods
	////////////////////////////////////////////////////////////////////

		private static void reset()
		{
			MaxValueMap.removeAll(KEY);
		}

		//--------------------------------------------------------------

		private static void update()
		{
			MaxValueMap.update(KEY);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		protected String getKey()
		{
			return KEY;
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// ENTROPY PANEL LABEL CLASS


	private static class EntropyPanelLabel
		extends FixedWidthLabel
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	String	KEY	= EntropyPanelLabel.class.getCanonicalName();

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private EntropyPanelLabel(String text)
		{
			super(text);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Class methods
	////////////////////////////////////////////////////////////////////

		private static void reset()
		{
			MaxValueMap.removeAll(KEY);
		}

		//--------------------------------------------------------------

		private static void update()
		{
			MaxValueMap.update(KEY);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		protected String getKey()
		{
			return KEY;
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// FILENAME SUFFIX FIELD CLASS


	private static class FilenameSuffixField
		extends ConstrainedTextField
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int		LENGTH			= 32;
		private static final	int		NUM_COLUMNS		= 8;
		private static final	String	VALID_SYMBOLS	= "-._";

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private FilenameSuffixField(String text)
		{
			super(LENGTH, NUM_COLUMNS, text);
			AppFont.TEXT_FIELD.apply(this);
			GuiUtils.setTextComponentMargins(this);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		protected boolean acceptCharacter(char ch,
										  int  index)
		{
			return (Character.isAlphabetic(ch) || Character.isDigit(ch) ||
					 (VALID_SYMBOLS.indexOf(ch) >= 0));
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// LINE LENGTH FIELD CLASS


	private static class LineLengthField
		extends IntegerField.Unsigned
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int	FIELD_LENGTH	= 3;

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private LineLengthField()
		{
			super(FIELD_LENGTH);
			AppFont.TEXT_FIELD.apply(this);
			GuiUtils.setTextComponentMargins(this);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods
	////////////////////////////////////////////////////////////////////

		public Integer getLineLength()
		{
			int value = isEmpty() ? 0 : getValue();
			return ((value == 0) ? null : value);
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// COLOUR BUTTON CLASS


	private static class ColourButton
		extends JButton
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int		ICON_WIDTH	= 40;
		private static final	int		ICON_HEIGHT	= 16;
		private static final	Insets	MARGINS		= new Insets(2, 2, 2, 2);

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ColourButton(Color colour)
		{
			super(new ColourSampleIcon(ICON_WIDTH, ICON_HEIGHT));
			setMargin(MARGINS);
			setForeground(colour);
		}

		//--------------------------------------------------------------

	}

	//==================================================================


	// FONT PANEL CLASS


	private static class FontPanel
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int	MIN_SIZE	= 0;
		private static final	int	MAX_SIZE	= 99;

		private static final	int	SIZE_FIELD_LENGTH	= 2;

		private static final	String	DEFAULT_FONT_STR	= "<default font>";

	////////////////////////////////////////////////////////////////////
	//  Member classes : non-inner classes
	////////////////////////////////////////////////////////////////////


		// SIZE SPINNER CLASS


		private static class SizeSpinner
			extends IntegerSpinner
		{

		////////////////////////////////////////////////////////////////
		//  Constructors
		////////////////////////////////////////////////////////////////

			private SizeSpinner(int value)
			{
				super(value, MIN_SIZE, MAX_SIZE, SIZE_FIELD_LENGTH);
				AppFont.TEXT_FIELD.apply(this);
			}

			//----------------------------------------------------------

		////////////////////////////////////////////////////////////////
		//  Instance methods : overriding methods
		////////////////////////////////////////////////////////////////

			/**
			 * @throws NumberFormatException
			 */

			@Override
			protected int getEditorValue()
			{
				IntegerValueField field = (IntegerValueField)getEditor();
				return (field.isEmpty() ? 0 : field.getValue());
			}

			//----------------------------------------------------------

			@Override
			protected void setEditorValue(int value)
			{
				IntegerValueField field = (IntegerValueField)getEditor();
				if (value == 0)
					field.setText(null);
				else
					field.setValue(value);
			}

			//----------------------------------------------------------

		}

		//==============================================================

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private FontPanel(FontEx   font,
						  String[] fontNames)
		{
			nameComboBox = new FComboBox<>();
			nameComboBox.addItem(DEFAULT_FONT_STR);
			for (String fontName : fontNames)
				nameComboBox.addItem(fontName);
			nameComboBox.setSelectedIndex(Utils.indexOf(font.getName(), fontNames) + 1);

			styleComboBox = new FComboBox<>(FontStyle.values());
			styleComboBox.setSelectedValue(font.getStyle());

			sizeSpinner = new SizeSpinner(font.getSize());
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods
	////////////////////////////////////////////////////////////////////

		public FontEx getFont()
		{
			String name = (nameComboBox.getSelectedIndex() <= 0) ? null : nameComboBox.getSelectedValue();
			return new FontEx(name, styleComboBox.getSelectedValue(), sizeSpinner.getIntValue());
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	FComboBox<String>		nameComboBox;
		private	FComboBox<FontStyle>	styleComboBox;
		private	SizeSpinner				sizeSpinner;

	}

	//==================================================================

////////////////////////////////////////////////////////////////////////
//  Constructors
////////////////////////////////////////////////////////////////////////

	private PreferencesDialog(Window owner)
	{

		// Call superclass constructor
		super(owner, TITLE_STR, Dialog.ModalityType.APPLICATION_MODAL);

		// Set icons
		setIconImages(owner.getIconImages());


		//----  Tabbed panel

		tabbedPanel = new FTabbedPane();
		for (Tab tab : Tab.values())
			tabbedPanel.addTab(tab.text, tab.createPanel(this));
		tabbedPanel.setSelectedIndex(tabIndex);


		//----  Button panel: save configuration

		JPanel saveButtonPanel = new JPanel(new GridLayout(1, 0, 8, 0));

		// Button: save configuration
		JButton saveButton = new FButton(SAVE_CONFIGURATION_STR + AppConstants.ELLIPSIS_STR);
		saveButton.setActionCommand(Command.SAVE_CONFIGURATION);
		saveButton.addActionListener(this);
		saveButtonPanel.add(saveButton);


		//----  Button panel: OK, cancel

		JPanel okCancelButtonPanel = new JPanel(new GridLayout(1, 0, 8, 0));

		// Button: OK
		JButton okButton = new FButton(AppConstants.OK_STR);
		okButton.setActionCommand(Command.ACCEPT);
		okButton.addActionListener(this);
		okCancelButtonPanel.add(okButton);

		// Button: cancel
		JButton cancelButton = new FButton(AppConstants.CANCEL_STR);
		cancelButton.setActionCommand(Command.CLOSE);
		cancelButton.addActionListener(this);
		okCancelButtonPanel.add(cancelButton);


		//----  Button panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel buttonPanel = new JPanel(gridBag);
		buttonPanel.setBorder(BorderFactory.createEmptyBorder(3, 24, 3, 24));

		int gridX = 0;

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.5;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 12);
		gridBag.setConstraints(saveButtonPanel, gbc);
		buttonPanel.add(saveButtonPanel);

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.5;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 12, 0, 0);
		gridBag.setConstraints(okCancelButtonPanel, gbc);
		buttonPanel.add(okCancelButtonPanel);


		//----  Main panel

		JPanel mainPanel = new JPanel(gridBag);
		mainPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		int gridY = 0;

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(tabbedPanel, gbc);
		mainPanel.add(tabbedPanel);

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(3, 0, 0, 0);
		gridBag.setConstraints(buttonPanel, gbc);
		mainPanel.add(buttonPanel);

		// Add commands to action map
		KeyAction.create(mainPanel, JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,
						 KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), Command.CLOSE, this);


		//----  Window

		// Set content pane
		setContentPane(mainPanel);

		// Dispose of window explicitly
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

		// Handle window closing
		addWindowListener(new WindowAdapter()
		{
			@Override
			public void windowClosing(WindowEvent event)
			{
				onClose();
			}
		});

		// Prevent dialog from being resized
		setResizable(false);

		// Resize dialog to its preferred size
		pack();

		// Set location of dialog box
		if (location == null)
			location = GuiUtils.getComponentLocation(this, owner);
		setLocation(location);

		// Set default button
		getRootPane().setDefaultButton(okButton);

		// Show dialog
		setVisible(true);

	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Class methods
////////////////////////////////////////////////////////////////////////

	public static boolean showDialog(Component parent)
	{
		return new PreferencesDialog(GuiUtils.getWindow(parent)).accepted;
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods : ActionListener interface
////////////////////////////////////////////////////////////////////////

	public void actionPerformed(ActionEvent event)
	{
		try
		{
			String command = event.getActionCommand();

			if (command.equals(Command.TOGGLE_ARCHIVE_VIEW_COLUMN))
				onToggleArchiveViewColumn();

			else if (command.equals(Command.SET_ARCHIVE_VIEW_COLUMN_WIDTHS_TO_CURRENT))
				onSetArchiveViewColumnWidthsToCurrent();

			else if (command.equals(Command.CHOOSE_STATUS_TEXT_COLOUR))
				onChooseStatusTextColour();

			else if (command.equals(Command.CHOOSE_TEXT_VIEW_TEXT_COLOUR))
				onChooseTextViewTextColour();

			else if (command.equals(Command.CHOOSE_TEXT_VIEW_BACKGROUND_COLOUR))
				onChooseTextViewBackgroundColour();

			else if (command.equals(Command.CHOOSE_TEXT_VIEW_SELECTION_TEXT_COLOUR))
				onChooseTextViewSelectionTextColour();

			else if (command.equals(Command.CHOOSE_TEXT_VIEW_SELECTION_BACKGROUND_COLOUR))
				onChooseTextViewSelectionBackgroundColour();

			else if (command.equals(Command.CHOOSE_KEY_DATABASE))
				onChooseKeyDatabase();

			else if (command.equals(Command.CHOOSE_SEED_FILE_DIRECTORY))
				onChooseSeedFileDirectory();

			else if (command.equals(Command.SAVE_CONFIGURATION))
				onSaveConfiguration();

			else if (command.equals(Command.ACCEPT))
				onAccept();

			else if (command.equals(Command.CLOSE))
				onClose();
		}
		catch (AppException e)
		{
			JOptionPane.showMessageDialog(this, e, App.SHORT_NAME, JOptionPane.ERROR_MESSAGE);
		}
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods
////////////////////////////////////////////////////////////////////////

	private void updateArchiveViewComponents()
	{
		for (ArchiveView.Column key : archiveViewColumnCheckBoxes.keySet())
			archiveViewColumnWidthSpinners.get(key).
										setEnabled(archiveViewColumnCheckBoxes.get(key).isSelected());
	}

	//------------------------------------------------------------------

	private void validatePreferences()
		throws AppException
	{
		for (Tab tab : Tab.values())
			tab.validatePreferences(this);
	}

	//------------------------------------------------------------------

	private void setPreferences()
	{
		for (Tab tab : Tab.values())
			tab.setPreferences(this);
	}

	//------------------------------------------------------------------

	private void onToggleArchiveViewColumn()
	{
		updateArchiveViewComponents();
	}

	//------------------------------------------------------------------

	private void onSetArchiveViewColumnWidthsToCurrent()
	{
		ArchiveView view = App.INSTANCE.getArchiveView();
		if (view != null)
		{
			for (int i = 0; i < view.getTable().getColumnCount(); i++)
			{
				TableColumn column = view.getTable().getColumnModel().getColumn(i);
				ArchiveView.Column key = (ArchiveView.Column)column.getIdentifier();
				int width = column.getWidth();
				archiveViewColumnWidthSpinners.get(key).
									setIntValue(Math.min(Math.max(width, ArchiveView.MIN_COLUMN_WIDTH),
														 ArchiveView.MAX_COLUMN_WIDTH));
			}
		}
	}

	//------------------------------------------------------------------

	private void onChooseStatusTextColour()
	{
		Color colour = JColorChooser.showDialog(this, STATUS_TEXT_COLOUR_STR,
												statusTextColourButton.getForeground());
		if (colour != null)
			statusTextColourButton.setForeground(colour);
	}

	//------------------------------------------------------------------

	private void onChooseTextViewTextColour()
	{
		Color colour = JColorChooser.showDialog(this, TEXT_COLOUR_STR,
												textViewTextColourButton.getForeground());
		if (colour != null)
			textViewTextColourButton.setForeground(colour);
	}

	//------------------------------------------------------------------

	private void onChooseTextViewBackgroundColour()
	{
		Color colour = JColorChooser.showDialog(this, BACKGROUND_COLOUR_STR,
												textViewBackgroundColourButton.getForeground());
		if (colour != null)
			textViewBackgroundColourButton.setForeground(colour);
	}

	//------------------------------------------------------------------

	private void onChooseTextViewSelectionTextColour()
	{
		Color colour = JColorChooser.showDialog(this, SELECTION_TEXT_COLOUR_STR,
												textViewSelectionTextColourButton.getForeground());
		if (colour != null)
			textViewSelectionTextColourButton.setForeground(colour);
	}

	//------------------------------------------------------------------

	private void onChooseTextViewSelectionBackgroundColour()
	{
		Color colour = JColorChooser.showDialog(this, SELECTION_BACKGROUND_COLOUR_STR,
												textViewSelectionBackgroundColourButton.getForeground());
		if (colour != null)
			textViewSelectionBackgroundColourButton.setForeground(colour);
	}

	//------------------------------------------------------------------

	private void onChooseKeyDatabase()
	{
		if (keyDatabaseFileChooser == null)
		{
			keyDatabaseFileChooser = new JFileChooser();
			keyDatabaseFileChooser.setDialogTitle(KEY_DATABASE_TITLE_STR);
			keyDatabaseFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			keyDatabaseFileChooser.setApproveButtonMnemonic(KeyEvent.VK_S);
			keyDatabaseFileChooser.setApproveButtonToolTipText(SELECT_FILE_STR);
			keyDatabaseFileChooser.
								setFileFilter(new FilenameSuffixFilter(AppConstants.KEY_FILES_STR,
																	   AppConstants.KEY_FILE_SUFFIX));
		}
		keyDatabaseFileChooser.setSelectedFile(keyDatabaseField.getCanonicalFile());
		keyDatabaseFileChooser.rescanCurrentDirectory();
		if (keyDatabaseFileChooser.showDialog(this, SELECT_STR) == JFileChooser.APPROVE_OPTION)
			keyDatabaseField.setFile(keyDatabaseFileChooser.getSelectedFile());
	}

	//------------------------------------------------------------------

	private void onChooseSeedFileDirectory()
	{
		if (seedFileDirectoryChooser == null)
		{
			seedFileDirectoryChooser = new JFileChooser();
			seedFileDirectoryChooser.setDialogTitle(SEED_FILE_DIRECTORY_TITLE_STR);
			seedFileDirectoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			seedFileDirectoryChooser.setApproveButtonMnemonic(KeyEvent.VK_S);
			seedFileDirectoryChooser.setApproveButtonToolTipText(SELECT_DIRECTORY_STR);
		}
		seedFileDirectoryChooser.setCurrentDirectory(seedFileDirectoryField.getCanonicalFile());
		seedFileDirectoryChooser.rescanCurrentDirectory();
		if (seedFileDirectoryChooser.showDialog(this, SELECT_STR) == JFileChooser.APPROVE_OPTION)
			seedFileDirectoryField.setFile(seedFileDirectoryChooser.getSelectedFile());
	}

	//------------------------------------------------------------------

	private void onSaveConfiguration()
	{
		try
		{
			validatePreferences();

			File file = AppConfig.INSTANCE.chooseFile(this);
			if (file != null)
			{
				String[] optionStrs = Utils.getOptionStrings(AppConstants.REPLACE_STR);
				if (!file.exists() ||
					 (JOptionPane.showOptionDialog(this, Utils.getPathname(file) +
																			AppConstants.ALREADY_EXISTS_STR,
												   SAVE_CONFIG_FILE_STR, JOptionPane.OK_CANCEL_OPTION,
												   JOptionPane.WARNING_MESSAGE, null, optionStrs,
												   optionStrs[1]) == JOptionPane.OK_OPTION))
				{
					setPreferences();
					accepted = true;
					TaskProgressDialog.showDialog(this, WRITE_CONFIG_FILE_STR,
												  new Task.WriteConfig(file));
				}
			}
		}
		catch (AppException e)
		{
			JOptionPane.showMessageDialog(this, e, App.SHORT_NAME, JOptionPane.ERROR_MESSAGE);
		}
		if (accepted)
			onClose();
	}

	//------------------------------------------------------------------

	private void onAccept()
		throws AppException
	{
		validatePreferences();
		setPreferences();
		accepted = true;
		onClose();
	}

	//------------------------------------------------------------------

	private void onClose()
	{
		FPathnameField.removeObservers(KEY);

		location = getLocation();
		tabIndex = tabbedPanel.getSelectedIndex();
		kdfUse = kdfParameterPanel.getKdfUse();
		setVisible(false);
		dispose();
	}

	//------------------------------------------------------------------

	private JPanel createPanelGeneral()
	{

		//----  Control panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel controlPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(controlPanel);

		int gridY = 0;

		AppConfig config = AppConfig.INSTANCE;

		// Label: show UNIX pathnames
		JLabel showUnixPathnamesLabel = new FLabel(SHOW_UNIX_PATHNAMES_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(showUnixPathnamesLabel, gbc);
		controlPanel.add(showUnixPathnamesLabel);

		// Combo box: show UNIX pathnames
		showUnixPathnamesComboBox = new BooleanComboBox(config.isShowUnixPathnames());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(showUnixPathnamesComboBox, gbc);
		controlPanel.add(showUnixPathnamesComboBox);

		// Label: select text on focus gained
		JLabel selectTextOnFocusGainedLabel = new FLabel(SELECT_TEXT_ON_FOCUS_GAINED_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(selectTextOnFocusGainedLabel, gbc);
		controlPanel.add(selectTextOnFocusGainedLabel);

		// Combo box: select text on focus gained
		selectTextOnFocusGainedComboBox = new BooleanComboBox(config.isSelectTextOnFocusGained());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(selectTextOnFocusGainedComboBox, gbc);
		controlPanel.add(selectTextOnFocusGainedComboBox);

		// Label: save main window location
		JLabel saveMainWindowLocationLabel = new FLabel(SAVE_MAIN_WINDOW_LOCATION_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(saveMainWindowLocationLabel, gbc);
		controlPanel.add(saveMainWindowLocationLabel);

		// Combo box: save main window location
		saveMainWindowLocationComboBox = new BooleanComboBox(config.isMainWindowLocation());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(saveMainWindowLocationComboBox, gbc);
		controlPanel.add(saveMainWindowLocationComboBox);

		// Label: save main window size
		JLabel saveMainWindowSizeLabel = new FLabel(SAVE_MAIN_WINDOW_SIZE_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(saveMainWindowSizeLabel, gbc);
		controlPanel.add(saveMainWindowSizeLabel);

		// Combo box: save main window size
		saveMainWindowSizeComboBox = new BooleanComboBox(config.isMainWindowSize());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(saveMainWindowSizeComboBox, gbc);
		controlPanel.add(saveMainWindowSizeComboBox);

		// Label: maximum edit list length
		JLabel maxEditListLengthLabel = new FLabel(MAX_EDIT_HISTORY_SIZE_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(maxEditListLengthLabel, gbc);
		controlPanel.add(maxEditListLengthLabel);

		// Spinner: maximum edit list length
		maxEditListLengthSpinner = new FIntegerSpinner(config.getMaxEditListLength(),
													   TextDocument.MIN_MAX_EDIT_LIST_LENGTH,
													   TextDocument.MAX_MAX_EDIT_LIST_LENGTH,
													   MAX_EDIT_LIST_LENGTH_FIELD_LENGTH);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(maxEditListLengthSpinner, gbc);
		controlPanel.add(maxEditListLengthSpinner);

		// Label: clear clipboard on exit
		JLabel clearClipboardOnExitLabel = new FLabel(CLEAR_CLIPBOARD_ON_EXIT_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(clearClipboardOnExitLabel, gbc);
		controlPanel.add(clearClipboardOnExitLabel);

		// Combo box: clear clipboard on exit
		clearClipboardOnExitComboBox = new BooleanComboBox(config.isClearClipboardOnExit());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(clearClipboardOnExitComboBox, gbc);
		controlPanel.add(clearClipboardOnExitComboBox);

		// Label: encrypted file drag-and-drop action
		JLabel encryptedFileDragAndDropActionLabel = new FLabel(ENCRYPTED_FILE_DAD_ACTION_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(encryptedFileDragAndDropActionLabel, gbc);
		controlPanel.add(encryptedFileDragAndDropActionLabel);

		// Combo box: encrypted file drag-and-drop action
		encryptedFileDragAndDropActionComboBox = new FComboBox<>(EncryptedFileImportKind.values());
		encryptedFileDragAndDropActionComboBox.
											setSelectedValue(config.getEncryptedFileDragAndDropAction());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(encryptedFileDragAndDropActionComboBox, gbc);
		controlPanel.add(encryptedFileDragAndDropActionComboBox);

		// Label: carrier image kind
		JLabel carrierImageKindLabel = new FLabel(CARRIER_IMAGE_KIND_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(carrierImageKindLabel, gbc);
		controlPanel.add(carrierImageKindLabel);

		// Combo box: carrier image kind
		carrierImageKindComboBox = new FComboBox<>(CarrierImage.Kind.values());
		carrierImageKindComboBox.setSelectedValue(config.getCarrierImageKind());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(carrierImageKindComboBox, gbc);
		controlPanel.add(carrierImageKindComboBox);


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(controlPanel, gbc);
		outerPanel.add(controlPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelAppearance()
	{

		//----  Control panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel controlPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(controlPanel);

		int gridY = 0;

		AppConfig config = AppConfig.INSTANCE;

		// Label: look-and-feel
		JLabel lookAndFeelLabel = new FLabel(LOOK_AND_FEEL_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(lookAndFeelLabel, gbc);
		controlPanel.add(lookAndFeelLabel);

		// Combo box: look-and-feel
		lookAndFeelComboBox = new FComboBox<>();

		UIManager.LookAndFeelInfo[] lookAndFeelInfos = UIManager.getInstalledLookAndFeels();
		if (lookAndFeelInfos.length == 0)
		{
			lookAndFeelComboBox.addItem(NO_LOOK_AND_FEELS_STR);
			lookAndFeelComboBox.setSelectedIndex(0);
			lookAndFeelComboBox.setEnabled(false);
		}
		else
		{
			String[] lookAndFeelNames = new String[lookAndFeelInfos.length];
			for (int i = 0; i < lookAndFeelInfos.length; i++)
			{
				lookAndFeelNames[i] = lookAndFeelInfos[i].getName();
				lookAndFeelComboBox.addItem(lookAndFeelNames[i]);
			}
			lookAndFeelComboBox.setSelectedValue(config.getLookAndFeel());
		}

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(lookAndFeelComboBox, gbc);
		controlPanel.add(lookAndFeelComboBox);

		// Label: text antialiasing
		JLabel textAntialiasingLabel = new FLabel(TEXT_ANTIALIASING_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textAntialiasingLabel, gbc);
		controlPanel.add(textAntialiasingLabel);

		// Combo box: text antialiasing
		textAntialiasingComboBox = new FComboBox<>(TextRendering.Antialiasing.values());
		textAntialiasingComboBox.setSelectedValue(config.getTextAntialiasing());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textAntialiasingComboBox, gbc);
		controlPanel.add(textAntialiasingComboBox);

		// Label: status text colour
		JLabel statusTextColourLabel = new FLabel(STATUS_TEXT_COLOUR_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(statusTextColourLabel, gbc);
		controlPanel.add(statusTextColourLabel);

		// Button: status text colour
		statusTextColourButton = new ColourButton(config.getStatusTextColour());
		statusTextColourButton.setActionCommand(Command.CHOOSE_STATUS_TEXT_COLOUR);
		statusTextColourButton.addActionListener(this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(statusTextColourButton, gbc);
		controlPanel.add(statusTextColourButton);


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(controlPanel, gbc);
		outerPanel.add(controlPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelArchiveView()
	{

		// Reset fixed-width components
		ArchiveViewPanelComponentFactory.reset();
		ArchiveViewPanel.reset();


		//----  Size panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel sizePanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(sizePanel);

		// Panel: size, inner
		JPanel sizeInnerPanel = new ArchiveViewPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(sizeInnerPanel, gbc);
		sizePanel.add(sizeInnerPanel);

		int gridY = 0;

		AppConfig config = AppConfig.INSTANCE;

		// Label: number of rows
		JLabel numRowsLabel = ArchiveViewPanelComponentFactory.createLabel(NUM_ROWS_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(numRowsLabel, gbc);
		sizeInnerPanel.add(numRowsLabel);

		// Spinner: number of rows
		archiveViewNumRowsSpinner = new FIntegerSpinner(config.getArchiveViewNumRows(),
														ArchiveView.MIN_NUM_ROWS, ArchiveView.MAX_NUM_ROWS,
														ARCHIVE_VIEW_ROWS_FIELD_LENGTH);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(archiveViewNumRowsSpinner, gbc);
		sizeInnerPanel.add(archiveViewNumRowsSpinner);


		//----  Column widths panel

		JPanel columnWidthsPanel = new JPanel(gridBag);
		TitledBorder.setPaddedBorder(columnWidthsPanel, COLUMN_WIDTHS_STR);

		// Panel: column widths, inner
		JPanel columnWidthsInnerPanel = new ArchiveViewPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(columnWidthsInnerPanel, gbc);
		columnWidthsPanel.add(columnWidthsInnerPanel);

		gridY = 0;

		archiveViewColumnCheckBoxes = new EnumMap<>(ArchiveView.Column.class);
		archiveViewColumnWidthSpinners = new EnumMap<>(ArchiveView.Column.class);
		for (ArchiveView.Column key : ArchiveView.Column.values())
		{
			// Check box: column
			String text = key.toString();
			JComponent component = null;
			if (key == ArchiveView.Column.PATH)
			{
				FLabel columnLabel = new FLabel(text);
				component = columnLabel;
			}
			else
			{
				FCheckBox columnCheckBox = ArchiveViewPanelComponentFactory.createCheckBox(text);
				columnCheckBox.setActionCommand(Command.TOGGLE_ARCHIVE_VIEW_COLUMN);
				columnCheckBox.addActionListener(this);
				columnCheckBox.setSelected(key.isVisible());
				archiveViewColumnCheckBoxes.put(key, columnCheckBox);
				component = columnCheckBox;
			}

			gbc.gridx = 0;
			gbc.gridy = gridY;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_END;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(component, gbc);
			columnWidthsInnerPanel.add(component);

			// Spinner: column width
			FIntegerSpinner spinner = new FIntegerSpinner(key.isVisible() ? key.getWidth()
																		  : key.getDefaultWidth(),
														  ArchiveView.MIN_COLUMN_WIDTH,
														  ArchiveView.MAX_COLUMN_WIDTH,
														  ARCHIVE_VIEW_COLUMN_WIDTH_FIELD_LENGTH);
			archiveViewColumnWidthSpinners.put(key, spinner);

			gbc.gridx = 1;
			gbc.gridy = gridY++;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 1.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(spinner, gbc);
			columnWidthsInnerPanel.add(spinner);
		}

		// Button: set widths from current view
		JButton setWidthsButton = new FButton(SET_FROM_CURRENT_VIEW_STR);
		setWidthsButton.setToolTipText(SET_WIDTHS_TOOLTIP_STR);
		if (App.INSTANCE.getArchiveView() == null)
			setWidthsButton.setEnabled(false);
		else
		{
			setWidthsButton.setActionCommand(Command.SET_ARCHIVE_VIEW_COLUMN_WIDTHS_TO_CURRENT);
			setWidthsButton.addActionListener(this);
		}

		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(4, 3, 2, 3);
		gridBag.setConstraints(setWidthsButton, gbc);
		columnWidthsPanel.add(setWidthsButton);

		// Update widths of components
		ArchiveViewPanelComponentFactory.update();
		ArchiveViewPanel.update();

		// Update components
		updateArchiveViewComponents();


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gridY = 0;

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(sizePanel, gbc);
		outerPanel.add(sizePanel);

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(3, 0, 0, 0);
		gridBag.setConstraints(columnWidthsPanel, gbc);
		outerPanel.add(columnWidthsPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelTextView()
	{

		//----  Size panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel sizePanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(sizePanel);

		int gridY = 0;

		AppConfig config = AppConfig.INSTANCE;

		// Label: size
		JLabel sizeLabel = new FLabel(SIZE_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(sizeLabel, gbc);
		sizePanel.add(sizeLabel);

		// Panel: text-view size
		textViewSizePanel = new DimensionsSpinnerPanel(config.getTextViewSize().width,
													   TextView.MIN_NUM_COLUMNS, TextView.MAX_NUM_COLUMNS,
													   TEXT_VIEW_COLUMNS_FIELD_LENGTH,
													   config.getTextViewSize().height,
													   TextView.MIN_NUM_ROWS, TextView.MAX_NUM_ROWS,
													   TEXT_VIEW_ROWS_FIELD_LENGTH,
													   new String[]{ COLUMNS_STR, ROWS_STR });

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textViewSizePanel, gbc);
		sizePanel.add(textViewSizePanel);


		//----  Colours panel

		JPanel coloursPanel = new JPanel(gridBag);
		TitledBorder.setPaddedBorder(coloursPanel, COLOURS_STR);

		// Panel: colours A
		JPanel coloursPanelA = new JPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.FIRST_LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(coloursPanelA, gbc);
		coloursPanel.add(coloursPanelA);

		gridY = 0;

		// Label: text colour
		JLabel textColourLabel = new FLabel(TEXT1_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textColourLabel, gbc);
		coloursPanelA.add(textColourLabel);

		// Button: text colour
		textViewTextColourButton = new ColourButton(config.getTextViewTextColour());
		textViewTextColourButton.setActionCommand(Command.CHOOSE_TEXT_VIEW_TEXT_COLOUR);
		textViewTextColourButton.addActionListener(this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textViewTextColourButton, gbc);
		coloursPanelA.add(textViewTextColourButton);

		// Label: background colour
		JLabel backgroundColourLabel = new FLabel(BACKGROUND_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(backgroundColourLabel, gbc);
		coloursPanelA.add(backgroundColourLabel);

		// Button: background colour
		textViewBackgroundColourButton = new ColourButton(config.getTextViewBackgroundColour());
		textViewBackgroundColourButton.setActionCommand(Command.CHOOSE_TEXT_VIEW_BACKGROUND_COLOUR);
		textViewBackgroundColourButton.addActionListener(this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textViewBackgroundColourButton, gbc);
		coloursPanelA.add(textViewBackgroundColourButton);

		// Panel: colours B
		JPanel coloursPanelB = new JPanel(gridBag);

		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.FIRST_LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 8, 0, 0);
		gridBag.setConstraints(coloursPanelB, gbc);
		coloursPanel.add(coloursPanelB);

		// Label: selection text colour
		JLabel selectedTextColourLabel = new FLabel(SELECTION_TEXT_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(selectedTextColourLabel, gbc);
		coloursPanelB.add(selectedTextColourLabel);

		// Button: selection text colour
		textViewSelectionTextColourButton = new ColourButton(config.getTextViewSelectionTextColour());
		textViewSelectionTextColourButton.
										setActionCommand(Command.CHOOSE_TEXT_VIEW_SELECTION_TEXT_COLOUR);
		textViewSelectionTextColourButton.addActionListener(this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textViewSelectionTextColourButton, gbc);
		coloursPanelB.add(textViewSelectionTextColourButton);

		// Label: selection background colour
		JLabel selectedBackgroundColourLabel = new FLabel(SELECTION_BACKGROUND_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(selectedBackgroundColourLabel, gbc);
		coloursPanelB.add(selectedBackgroundColourLabel);

		// Button: selection background colour
		textViewSelectionBackgroundColourButton =
										new ColourButton(config.getTextViewSelectionBackgroundColour());
		textViewSelectionBackgroundColourButton.
								setActionCommand(Command.CHOOSE_TEXT_VIEW_SELECTION_BACKGROUND_COLOUR);
		textViewSelectionBackgroundColourButton.addActionListener(this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textViewSelectionBackgroundColourButton, gbc);
		coloursPanelB.add(textViewSelectionBackgroundColourButton);


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gridY = 0;

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(sizePanel, gbc);
		outerPanel.add(sizePanel);

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(3, 0, 0, 0);
		gridBag.setConstraints(coloursPanel, gbc);
		outerPanel.add(coloursPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelText()
	{

		//----  Wrap panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel wrapPanel = new JPanel(gridBag);
		TitledBorder.setPaddedBorder(wrapPanel, TEXT_WRAP_STR);

		int gridY = 0;

		AppConfig config = AppConfig.INSTANCE;

		// Label: default line length
		JLabel defaultLineLengthLabel = new FLabel(DEFAULT_LINE_LENGTH_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(defaultLineLengthLabel, gbc);
		wrapPanel.add(defaultLineLengthLabel);

		// Field: default line length
		textWrapDefaultLineLengthField = new LineLengthField();
		Integer lineLength = config.getTextWrapDefaultLineLength();
		if (lineLength != null)
			textWrapDefaultLineLengthField.setValue(lineLength);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textWrapDefaultLineLengthField, gbc);
		wrapPanel.add(textWrapDefaultLineLengthField);

		// Label: end of sentence pattern
		JLabel endOfSentencePatternLabel = new FLabel(END_OF_SENTENCE_PATTERN_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(endOfSentencePatternLabel, gbc);
		wrapPanel.add(endOfSentencePatternLabel);

		// Field: end of sentence pattern
		textWrapEndOfSentencePatternField = new FTextField(config.getTextWrapEndOfSentencePattern(),
														   END_OF_SENTENCE_PATTERN_FIELD_NUM_COLUMNS);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textWrapEndOfSentencePatternField, gbc);
		wrapPanel.add(textWrapEndOfSentencePatternField);

		// Label: number of spaces between sentences
		JLabel numSpacesBetweenSentencesLabel = new FLabel(NUM_SPACES_BETWEEN_SENTENCES_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(numSpacesBetweenSentencesLabel, gbc);
		wrapPanel.add(numSpacesBetweenSentencesLabel);

		// Label: number of spaces between sentences
		textWrapNumSpacesBetweenSentencesSpinner =
										new FIntegerSpinner(config.getTextWrapNumSpacesBetweenSentences(),
															TextDocument.MIN_NUM_SPACES_BETWEEN_SENTENCES,
															TextDocument.MAX_NUM_SPACES_BETWEEN_SENTENCES,
															NUM_SPACES_BETWEEN_SENTENCES_FIELD_LENGTH);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(textWrapNumSpacesBetweenSentencesSpinner, gbc);
		wrapPanel.add(textWrapNumSpacesBetweenSentencesSpinner);


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(wrapPanel, gbc);
		outerPanel.add(wrapPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelFiles()
	{

		// Reset fixed-width labels and panels
		FilesPanelLabel.reset();
		FilesPanel.reset();


		//----  Filename suffix panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel filenameSuffixPanel = new JPanel(gridBag);
		TitledBorder.setPaddedBorder(filenameSuffixPanel, FILENAME_SUFFIX_STR);

		int gridY = 0;

		AppConfig config = AppConfig.INSTANCE;

		// Panel: filename suffix, inner
		JPanel filenameSuffixInnerPanel = new FilesPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(filenameSuffixInnerPanel, gbc);
		filenameSuffixPanel.add(filenameSuffixInnerPanel);

		// Fields: filename suffix
		filenameSuffixFields = new EnumMap<>(FileKind.class);
		for (FileKind fileKind : FileKind.values())
		{
			// Label: file kind
			JLabel label = new FilesPanelLabel(fileKind.getDescription());

			gbc.gridx = 0;
			gbc.gridy = gridY;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_END;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(label, gbc);
			filenameSuffixInnerPanel.add(label);

			// Field: filename suffix
			FilenameSuffixField field = new FilenameSuffixField(fileKind.getFilenameSuffix());
			filenameSuffixFields.put(fileKind, field);

			gbc.gridx = 1;
			gbc.gridy = gridY++;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 1.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(field, gbc);
			filenameSuffixInnerPanel.add(field);
		}


		//----  Select encrypt/decrypt output file panel

		JPanel selectOutputFilePanel = new JPanel(gridBag);
		TitledBorder.setPaddedBorder(selectOutputFilePanel, SELECT_OUTPUT_FILE_STR);

		gridY = 0;

		// Panel: output file selection, inner
		JPanel selectOutputFileInnerPanel = new FilesPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(selectOutputFileInnerPanel, gbc);
		selectOutputFilePanel.add(selectOutputFileInnerPanel);

		// Combo boxes: select encrypt/decrypt output file
		selectEncryptDecryptOutputFileComboBoxes = new EnumMap<>(ActionSource.class);
		for (ActionSource actionSource : ActionSource.values())
		{
			// Label: action source
			JLabel label = new FilesPanelLabel(actionSource.toString());

			gbc.gridx = 0;
			gbc.gridy = gridY;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_END;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(label, gbc);
			selectOutputFileInnerPanel.add(label);

			// Combo box: action source
			BooleanComboBox comboBox =
									new BooleanComboBox(actionSource.isSelectEncryptDecryptOutputFile());
			selectEncryptDecryptOutputFileComboBoxes.put(actionSource, comboBox);

			gbc.gridx = 1;
			gbc.gridy = gridY++;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 1.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(comboBox, gbc);
			selectOutputFileInnerPanel.add(comboBox);
		}


		//----  Control panel

		JPanel controlPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(controlPanel);

		gridY = 0;

		// Panel: control, inner
		JPanel controlInnerPanel = new FilesPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(controlInnerPanel, gbc);
		controlPanel.add(controlInnerPanel);

		// Label: number of passes when erasing file
		JLabel fileErasureNumPassesLabel = new FilesPanelLabel(FILE_ERASURE_NUM_PASSES_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(fileErasureNumPassesLabel, gbc);
		controlInnerPanel.add(fileErasureNumPassesLabel);

		// Spinner: number of passes when erasing file
		fileErasureNumPassesSpinner = new FIntegerSpinner(config.getFileErasureNumPasses(),
														  FileEraser.MIN_NUM_PASSES,
														  FileEraser.MAX_NUM_PASSES,
														  FILE_ERASURE_NUM_PASSES_FIELD_LENGTH);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(fileErasureNumPassesSpinner, gbc);
		controlInnerPanel.add(fileErasureNumPassesSpinner);

		// Label: save file-selection pathnames
		JLabel saveFileSelectionPathnamesLabel = new FilesPanelLabel(SAVE_FILE_SELECTION_PATHNAMES_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(saveFileSelectionPathnamesLabel, gbc);
		controlInnerPanel.add(saveFileSelectionPathnamesLabel);

		// Combo box: save file-selection pathnames
		saveFileSelectionPathnamesComboBox = new BooleanComboBox(config.isSaveFileSelectionPathnames());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(saveFileSelectionPathnamesComboBox, gbc);
		controlInnerPanel.add(saveFileSelectionPathnamesComboBox);

		// Update widths of labels and panels
		FilesPanelLabel.update();
		FilesPanel.update();


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gridY = 0;

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(filenameSuffixPanel, gbc);
		outerPanel.add(filenameSuffixPanel);

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(3, 0, 0, 0);
		gridBag.setConstraints(selectOutputFilePanel, gbc);
		outerPanel.add(selectOutputFilePanel);

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(3, 0, 0, 0);
		gridBag.setConstraints(controlPanel, gbc);
		outerPanel.add(controlPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelKeys()
	{

		//----  Control panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel controlPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(controlPanel);

		int gridY = 0;

		AppConfig config = AppConfig.INSTANCE;

		// Label: key database
		JLabel keyDatabaseLabel = new FLabel(KEY_DATABASE_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(keyDatabaseLabel, gbc);
		controlPanel.add(keyDatabaseLabel);

		// Panel: key database
		keyDatabaseField = new FPathnameField(config.getKeyDatabaseFile());
		FPathnameField.addObserver(KEY, keyDatabaseField);
		JPanel keyDatabasePanel = new PathnamePanel(keyDatabaseField, Command.CHOOSE_KEY_DATABASE, this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(keyDatabasePanel, gbc);
		controlPanel.add(keyDatabasePanel);

		// Label: warn of use of temporary key
		JLabel warnTemporaryKeyLabel = new FLabel(WARN_TEMPORARY_KEY_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(warnTemporaryKeyLabel, gbc);
		controlPanel.add(warnTemporaryKeyLabel);

		// Combo box: warn of use of temporary key
		warnTemporaryKeyComboBox = new BooleanComboBox(config.isWarnTemporaryKey());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(warnTemporaryKeyComboBox, gbc);
		controlPanel.add(warnTemporaryKeyComboBox);


		//----  Key derivation function panel

		kdfParameterPanel = new KdfParameterPanel(kdfUse, KdfUse.getKdfParameterMap());
		TitledBorder.setPaddedBorder(kdfParameterPanel, KEY_DERIVATION_FUNCTION_STR);


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gridY = 0;

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(controlPanel, gbc);
		outerPanel.add(controlPanel);

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(3, 0, 0, 0);
		gridBag.setConstraints(kdfParameterPanel, gbc);
		outerPanel.add(kdfParameterPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelEntropy()
	{

		// Reset fixed-width labels
		EntropyPanelLabel.reset();


		//----  Control panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel controlPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(controlPanel);

		AppConfig config = AppConfig.INSTANCE;

		int gridY = 0;

		// Label: seed-file directory
		JLabel seedFileDirectoryLabel = new EntropyPanelLabel(SEED_FILE_DIRECTORY_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(seedFileDirectoryLabel, gbc);
		controlPanel.add(seedFileDirectoryLabel);

		// Panel: seed-file directory
		seedFileDirectoryField = new FPathnameField(config.getSeedFileDirectory());
		FPathnameField.addObserver(KEY, seedFileDirectoryField);
		JPanel seedFileDirectoryPanel = new PathnamePanel(seedFileDirectoryField,
														  Command.CHOOSE_SEED_FILE_DIRECTORY, this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(seedFileDirectoryPanel, gbc);
		controlPanel.add(seedFileDirectoryPanel);

		// Label: warn if not seeded
		JLabel warnNotSeededLabel = new EntropyPanelLabel(WARN_NOT_SEEDED_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(warnNotSeededLabel, gbc);
		controlPanel.add(warnNotSeededLabel);

		// Combo box: warn if not seeded
		warnNotSeededComboBox = new BooleanComboBox(config.isWarnNotSeeded());

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(warnNotSeededComboBox, gbc);
		controlPanel.add(warnNotSeededComboBox);

		// Label: timer divisor
		JLabel timerDivisorLabel = new EntropyPanelLabel(TIMER_DIVISOR_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(timerDivisorLabel, gbc);
		controlPanel.add(timerDivisorLabel);

		// Spinner: timer divisor
		entropyTimerDivisorSpinner = new FIntegerSpinner(config.getEntropyTimerDivisor(),
														 EntropyAccumulator.MIN_TIMER_DIVISOR,
														 EntropyAccumulator.MAX_TIMER_DIVISOR,
														 ENTROPY_TIMER_DIVISOR_FIELD_LENGTH);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(entropyTimerDivisorSpinner, gbc);
		controlPanel.add(entropyTimerDivisorSpinner);


		//----  Source panels

		Map<EntropyAccumulator.SourceKind, JPanel> sourcePanels =
													new EnumMap<>(EntropyAccumulator.SourceKind.class);
		entropyBitMaskPanels = new EnumMap<>(EntropyAccumulator.SourceKind.class);
		entropyIntervalSpinners = new EnumMap<>(EntropyAccumulator.SourceKind.class);
		for (EntropyAccumulator.SourceKind sourceKind : EntropyAccumulator.SourceKind.values())
		{
			// Source panel
			JPanel sourcePanel = new JPanel(gridBag);
			TitledBorder.setPaddedBorder(sourcePanel, sourceKind.toString());
			sourcePanels.put(sourceKind, sourcePanel);

			gridY = 0;

			// Label: bit mask
			JLabel bitMaskLabel = new EntropyPanelLabel(BIT_MASK_STR);

			gbc.gridx = 0;
			gbc.gridy = gridY;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_END;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(bitMaskLabel, gbc);
			sourcePanel.add(bitMaskLabel);

			// Panel: bit mask
			BitSelectionPanel bitMaskPanel =
									new BitSelectionPanel(EntropyAccumulator.SourceParams.BIT_MASK_LENGTH,
														  AppConfig.ENTROPY_SOURCE_MAX_NUM_BITS,
														  config.getEntropySourceBitMask(sourceKind));
			entropyBitMaskPanels.put(sourceKind, bitMaskPanel);

			gbc.gridx = 1;
			gbc.gridy = gridY++;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 1.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(bitMaskPanel, gbc);
			sourcePanel.add(bitMaskPanel);

			if (sourceKind.hasInterval())
			{
				// Label: interval
				JLabel intervalLabel = new EntropyPanelLabel(INTERVAL_STR);

				gbc.gridx = 0;
				gbc.gridy = gridY;
				gbc.gridwidth = 1;
				gbc.gridheight = 1;
				gbc.weightx = 0.0;
				gbc.weighty = 0.0;
				gbc.anchor = GridBagConstraints.LINE_END;
				gbc.fill = GridBagConstraints.NONE;
				gbc.insets = AppConstants.COMPONENT_INSETS;
				gridBag.setConstraints(intervalLabel, gbc);
				sourcePanel.add(intervalLabel);

				// Panel: interval
				JPanel intervalPanel = new JPanel(gridBag);

				gbc.gridx = 1;
				gbc.gridy = gridY++;
				gbc.gridwidth = 1;
				gbc.gridheight = 1;
				gbc.weightx = 0.0;
				gbc.weighty = 0.0;
				gbc.anchor = GridBagConstraints.LINE_START;
				gbc.fill = GridBagConstraints.NONE;
				gbc.insets = AppConstants.COMPONENT_INSETS;
				gridBag.setConstraints(intervalPanel, gbc);
				sourcePanel.add(intervalPanel);

				// Spinner: interval
				FIntegerSpinner intervalSpinner =
										new FIntegerSpinner(config.getEntropySourceInterval(sourceKind),
															EntropyAccumulator.SourceParams.MIN_INTERVAL,
															EntropyAccumulator.SourceParams.MAX_INTERVAL,
															ENTROPY_INTERVAL_FIELD_LENGTH);
				entropyIntervalSpinners.put(sourceKind, intervalSpinner);

				gbc.gridx = 0;
				gbc.gridy = 0;
				gbc.gridwidth = 1;
				gbc.gridheight = 1;
				gbc.weightx = 1.0;
				gbc.weighty = 0.0;
				gbc.anchor = GridBagConstraints.LINE_START;
				gbc.fill = GridBagConstraints.NONE;
				gbc.insets = new Insets(0, 0, 0, 0);
				gridBag.setConstraints(intervalSpinner, gbc);
				intervalPanel.add(intervalSpinner);

				// Label: ms
				JLabel msLabel = new FLabel(MS_STR);

				gbc.gridx = 1;
				gbc.gridy = 0;
				gbc.gridwidth = 1;
				gbc.gridheight = 1;
				gbc.weightx = 0.0;
				gbc.weighty = 0.0;
				gbc.anchor = GridBagConstraints.LINE_START;
				gbc.fill = GridBagConstraints.NONE;
				gbc.insets = new Insets(0, 4, 0, 0);
				gridBag.setConstraints(msLabel, gbc);
				intervalPanel.add(msLabel);
			}
		}

		// Update widths of labels
		EntropyPanelLabel.update();


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gridY = 0;

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(controlPanel, gbc);
		outerPanel.add(controlPanel);

		for (EntropyAccumulator.SourceKind sourceKind : sourcePanels.keySet())
		{
			JPanel sourcePanel = sourcePanels.get(sourceKind);

			gbc.gridx = 0;
			gbc.gridy = gridY++;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.NORTH;
			gbc.fill = GridBagConstraints.HORIZONTAL;
			gbc.insets = new Insets(3, 0, 0, 0);
			gridBag.setConstraints(sourcePanel, gbc);
			outerPanel.add(sourcePanel);
		}

		return outerPanel;

	}

	//------------------------------------------------------------------

	private JPanel createPanelFonts()
	{

		//----  Control panel

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel controlPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(controlPanel);

		String[] fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
		fontPanels = new FontPanel[AppFont.getNumFonts()];
		for (int i = 0; i < fontPanels.length; i++)
		{
			FontEx fontEx = AppConfig.INSTANCE.getFont(i);
			fontPanels[i] = new FontPanel(fontEx, fontNames);

			int gridX = 0;

			// Label: font
			JLabel fontLabel = new FLabel(AppFont.values()[i].toString());

			gbc.gridx = gridX++;
			gbc.gridy = i;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_END;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(fontLabel, gbc);
			controlPanel.add(fontLabel);

			// Combo box: font name
			gbc.gridx = gridX++;
			gbc.gridy = i;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(fontPanels[i].nameComboBox, gbc);
			controlPanel.add(fontPanels[i].nameComboBox);

			// Combo box: font style
			gbc.gridx = gridX++;
			gbc.gridy = i;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(fontPanels[i].styleComboBox, gbc);
			controlPanel.add(fontPanels[i].styleComboBox);

			// Panel: font size
			JPanel sizePanel = new JPanel(gridBag);

			gbc.gridx = gridX++;
			gbc.gridy = i;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = AppConstants.COMPONENT_INSETS;
			gridBag.setConstraints(sizePanel, gbc);
			controlPanel.add(sizePanel);

			// Spinner: font size
			gbc.gridx = 0;
			gbc.gridy = 0;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = new Insets(0, 0, 0, 0);
			gridBag.setConstraints(fontPanels[i].sizeSpinner, gbc);
			sizePanel.add(fontPanels[i].sizeSpinner);

			// Label: "pt"
			JLabel ptLabel = new FLabel(PT_STR);

			gbc.gridx = 1;
			gbc.gridy = 0;
			gbc.gridwidth = 1;
			gbc.gridheight = 1;
			gbc.weightx = 0.0;
			gbc.weighty = 0.0;
			gbc.anchor = GridBagConstraints.LINE_START;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets = new Insets(0, 4, 0, 0);
			gridBag.setConstraints(ptLabel, gbc);
			sizePanel.add(ptLabel);
		}


		//----  Outer panel

		JPanel outerPanel = new JPanel(gridBag);
		outerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(controlPanel, gbc);
		outerPanel.add(controlPanel);

		return outerPanel;

	}

	//------------------------------------------------------------------

	private void setFocus(Tab        tab,
						  JComponent component)
	{
		tabbedPanel.setSelectedIndex(tab.ordinal());
		GuiUtils.setFocus(component);
	}

	//------------------------------------------------------------------

	private void validatePreferencesGeneral()
		throws AppException
	{
		// do nothing
	}

	//------------------------------------------------------------------

	private void validatePreferencesAppearance()
	{
		// do nothing
	}

	//------------------------------------------------------------------

	private void validatePreferencesArchiveView()
	{
		// do nothing
	}

	//------------------------------------------------------------------

	private void validatePreferencesTextView()
	{
		// do nothing
	}

	//------------------------------------------------------------------

	private void validatePreferencesText()
		throws AppException
	{
		// Line length
		if (!textWrapDefaultLineLengthField.isEmpty())
		{
			try
			{
				try
				{
					int lineLength = textWrapDefaultLineLengthField.getValue();
					if ((lineLength < TextDocument.MIN_WRAP_LINE_LENGTH) ||
						 (lineLength > TextDocument.MAX_WRAP_LINE_LENGTH))
						throw new AppException(ErrorId.DEFAULT_LINE_LENGTH_OUT_OF_BOUNDS);
				}
				catch (NumberFormatException e)
				{
					throw new AppException(ErrorId.INVALID_DEFAULT_LINE_LENGTH);
				}
			}
			catch (AppException e)
			{
				setFocus(Tab.TEXT, textWrapDefaultLineLengthField);
				throw e;
			}
		}

		// End-of-sentence pattern
		try
		{
			String patternStr = textWrapEndOfSentencePatternField.getText();
			if (!patternStr.isEmpty())
			{
				Pattern.compile(patternStr);
				Pattern.compile("(" + patternStr + ") +");
			}
		}
		catch (PatternSyntaxException e)
		{
			setFocus(Tab.TEXT, textWrapEndOfSentencePatternField);
			int index = e.getIndex();
			if (index >= 0)
				textWrapEndOfSentencePatternField.setCaretPosition(index);
			throw new AppException(ErrorId.MALFORMED_END_OF_SENTENCE_PATTERN,
								   RegexUtils.getExceptionMessage(e));
		}
	}

	//------------------------------------------------------------------

	private void validatePreferencesFiles()
		throws AppException
	{
		// Filename suffixes
		for (FileKind key : filenameSuffixFields.keySet())
		{
			if (filenameSuffixFields.get(key).isEmpty())
			{
				setFocus(Tab.FILES, filenameSuffixFields.get(key));
				throw new AppException(ErrorId.NO_FILENAME_SUFFIX, key.getKey());
			}
		}
	}

	//------------------------------------------------------------------

	private void validatePreferencesKeys()
		throws AppException
	{
		// Key database file
		try
		{
			if (!keyDatabaseField.isEmpty())
			{
				File file = keyDatabaseField.getFile();
				if (file.exists() && !file.isFile())
					throw new FileException(ErrorId.NOT_A_FILE, file);
			}
		}
		catch (AppException e)
		{
			setFocus(Tab.KEYS, keyDatabaseField);
			throw e;
		}
	}

	//------------------------------------------------------------------

	private void validatePreferencesEntropy()
		throws AppException
	{
		// Seed-file directory
		try
		{
			if (!seedFileDirectoryField.isEmpty())
			{
				File directory = seedFileDirectoryField.getFile();
				if (directory.exists() && !directory.isDirectory())
					throw new FileException(ErrorId.NOT_A_DIRECTORY, directory);
			}
		}
		catch (AppException e)
		{
			setFocus(Tab.ENTROPY, seedFileDirectoryField);
			throw e;
		}
	}

	//------------------------------------------------------------------

	private void validatePreferencesFonts()
	{
		// do nothing
	}

	//------------------------------------------------------------------

	private void setPreferencesGeneral()
	{
		AppConfig config = AppConfig.INSTANCE;
		config.setShowUnixPathnames(showUnixPathnamesComboBox.getSelectedValue());
		config.setSelectTextOnFocusGained(selectTextOnFocusGainedComboBox.getSelectedValue());
		if (saveMainWindowLocationComboBox.getSelectedValue() != config.isMainWindowLocation())
			config.setMainWindowLocation(saveMainWindowLocationComboBox.getSelectedValue() ? new Point()
																						   : null);
		if (saveMainWindowSizeComboBox.getSelectedValue() != config.isMainWindowSize())
			config.setMainWindowSize(saveMainWindowSizeComboBox.getSelectedValue() ? new Dimension()
																				   : null);
		config.setMaxEditListLength(maxEditListLengthSpinner.getIntValue());
		config.setClearClipboardOnExit(clearClipboardOnExitComboBox.getSelectedValue());
		config.setEncryptedFileDragAndDropAction(encryptedFileDragAndDropActionComboBox.
																					getSelectedValue());
		config.setCarrierImageKind(carrierImageKindComboBox.getSelectedValue());
	}

	//------------------------------------------------------------------

	private void setPreferencesAppearance()
	{
		AppConfig config = AppConfig.INSTANCE;
		if (lookAndFeelComboBox.isEnabled() && (lookAndFeelComboBox.getSelectedIndex() >= 0))
			config.setLookAndFeel(lookAndFeelComboBox.getSelectedValue());
		config.setTextAntialiasing(textAntialiasingComboBox.getSelectedValue());
	}

	//------------------------------------------------------------------

	private void setPreferencesArchiveView()
	{
		AppConfig config = AppConfig.INSTANCE;
		config.setArchiveViewNumRows(archiveViewNumRowsSpinner.getIntValue());
		for (ArchiveView.Column key : archiveViewColumnWidthSpinners.keySet())
		{
			int columnWidth = (key == ArchiveView.Column.PATH) ||
														archiveViewColumnCheckBoxes.get(key).isSelected()
												? archiveViewColumnWidthSpinners.get(key).getIntValue()
												: 0;
			config.setArchiveViewColumnWidth(key, columnWidth);
		}
	}

	//------------------------------------------------------------------

	private void setPreferencesTextView()
	{
		AppConfig config = AppConfig.INSTANCE;
		config.setTextViewSize(textViewSizePanel.getDimensions());
		config.setTextViewTextColour(textViewTextColourButton.getForeground());
		config.setTextViewBackgroundColour(textViewBackgroundColourButton.getForeground());
		config.setTextViewSelectionTextColour(textViewSelectionTextColourButton.getForeground());
		config.setTextViewSelectionBackgroundColour(textViewSelectionBackgroundColourButton.
																						getForeground());
	}

	//------------------------------------------------------------------

	private void setPreferencesText()
	{
		AppConfig config = AppConfig.INSTANCE;
		config.setTextWrapDefaultLineLength(textWrapDefaultLineLengthField.getLineLength());
		config.setTextWrapEndOfSentencePattern(textWrapEndOfSentencePatternField.getText());
		config.setTextWrapNumSpacesBetweenSentences(textWrapNumSpacesBetweenSentencesSpinner.
																						getIntValue());
	}

	//------------------------------------------------------------------

	private void setPreferencesFiles()
	{
		AppConfig config = AppConfig.INSTANCE;
		for (FileKind key : filenameSuffixFields.keySet())
			config.setFilenameSuffix(key, filenameSuffixFields.get(key).getText());
		for (ActionSource key : selectEncryptDecryptOutputFileComboBoxes.keySet())
			config.setSelectEncryptDecryptOutputFile(key,
													 selectEncryptDecryptOutputFileComboBoxes.get(key).
																					getSelectedValue());
		config.setFileErasureNumPasses(fileErasureNumPassesSpinner.getIntValue());
		config.setSaveFileSelectionPathnames(saveFileSelectionPathnamesComboBox.getSelectedValue());
	}

	//------------------------------------------------------------------

	private void setPreferencesKeys()
	{
		AppConfig config = AppConfig.INSTANCE;
		config.setKeyDatabasePathname(keyDatabaseField.getText());
		config.setWarnTemporaryKey(warnTemporaryKeyComboBox.getSelectedValue());
		Map<KdfUse, StreamEncrypter.KdfParams> paramMap = kdfParameterPanel.getParameterMap();
		for (KdfUse key : paramMap.keySet())
			config.setKdfParameters(key, paramMap.get(key));
	}

	//------------------------------------------------------------------

	private void setPreferencesEntropy()
	{
		AppConfig config = AppConfig.INSTANCE;
		config.setSeedFileDirectoryPathname(seedFileDirectoryField.isEmpty()
																	? null
																	: seedFileDirectoryField.getText());
		config.setWarnNotSeeded(warnNotSeededComboBox.getSelectedValue());
		config.setEntropyTimerDivisor(entropyTimerDivisorSpinner.getIntValue());
		for (EntropyAccumulator.SourceKind sourceKind : entropyBitMaskPanels.keySet())
			config.setEntropySourceBitMask(sourceKind,
										   entropyBitMaskPanels.get(sourceKind).getBitMask());
		for (EntropyAccumulator.SourceKind sourceKind : entropyIntervalSpinners.keySet())
			config.setEntropySourceInterval(sourceKind,
											entropyIntervalSpinners.get(sourceKind).getIntValue());
	}

	//------------------------------------------------------------------

	private void setPreferencesFonts()
	{
		for (int i = 0; i < fontPanels.length; i++)
		{
			if (fontPanels[i].nameComboBox.getSelectedIndex() >= 0)
				AppConfig.INSTANCE.setFont(i, fontPanels[i].getFont());
		}
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Class fields
////////////////////////////////////////////////////////////////////////

	private static	Point	location;
	private static	int		tabIndex;
	private static	KdfUse	kdfUse		= KdfUse.VERIFICATION;

////////////////////////////////////////////////////////////////////////
//  Instance fields
////////////////////////////////////////////////////////////////////////

	// Main panel
	private	boolean										accepted;
	private	JTabbedPane									tabbedPanel;

	// General panel
	private	BooleanComboBox								showUnixPathnamesComboBox;
	private	BooleanComboBox								selectTextOnFocusGainedComboBox;
	private	BooleanComboBox								saveMainWindowLocationComboBox;
	private	BooleanComboBox								saveMainWindowSizeComboBox;
	private	FIntegerSpinner								maxEditListLengthSpinner;
	private	BooleanComboBox								clearClipboardOnExitComboBox;
	private	FComboBox<EncryptedFileImportKind>			encryptedFileDragAndDropActionComboBox;
	private	FComboBox<CarrierImage.Kind>				carrierImageKindComboBox;

	// Appearance panel
	private	FComboBox<String>							lookAndFeelComboBox;
	private	FComboBox<TextRendering.Antialiasing>		textAntialiasingComboBox;
	private	JButton										statusTextColourButton;

	// Archive view panel
	private	FIntegerSpinner								archiveViewNumRowsSpinner;
	private	Map<ArchiveView.Column, FCheckBox>			archiveViewColumnCheckBoxes;
	private	Map<ArchiveView.Column, FIntegerSpinner>	archiveViewColumnWidthSpinners;

	// Text view panel
	private	DimensionsSpinnerPanel						textViewSizePanel;
	private	JButton										textViewTextColourButton;
	private	JButton										textViewBackgroundColourButton;
	private	JButton										textViewSelectionTextColourButton;
	private	JButton										textViewSelectionBackgroundColourButton;

	// Text panel
	private	LineLengthField								textWrapDefaultLineLengthField;
	private	FTextField									textWrapEndOfSentencePatternField;
	private	FIntegerSpinner								textWrapNumSpacesBetweenSentencesSpinner;

	// Files panel
	private	Map<FileKind, FilenameSuffixField>			filenameSuffixFields;
	private	Map<ActionSource, BooleanComboBox>			selectEncryptDecryptOutputFileComboBoxes;
	private	FIntegerSpinner								fileErasureNumPassesSpinner;
	private	BooleanComboBox								saveFileSelectionPathnamesComboBox;

	// Keys panel
	private	FPathnameField								keyDatabaseField;
	private	JFileChooser								keyDatabaseFileChooser;
	private	BooleanComboBox								warnTemporaryKeyComboBox;
	private	KdfParameterPanel							kdfParameterPanel;

	// Entropy panel
	private	FPathnameField								seedFileDirectoryField;
	private	JFileChooser								seedFileDirectoryChooser;
	private	BooleanComboBox								warnNotSeededComboBox;
	private	FIntegerSpinner								entropyTimerDivisorSpinner;
	private Map<EntropyAccumulator.SourceKind,
				BitSelectionPanel>                     entropyBitMaskPanels;
	private Map<EntropyAccumulator.SourceKind,
				FIntegerSpinner>                           entropyIntervalSpinners;

	// Fonts panel
	private	FontPanel[]									fontPanels;

}

//----------------------------------------------------------------------
